SPECIAL CHARACTERS: https://www.doc.ic.ac.uk/~svb/chars.html

BULLETS
• • ‣ → ↳ ▶
▷ ▸ ▹ ► ▻
◆ ◇ ◈ ◉ ◊ ○ ◌ ◍ ◎ ●

TABLES
─ ━ ┄ ┅ ┈ ┉ ╌ ╍ ═
│ ┃ ┆ ┇ ┊ ┋ ╎ ╏ ║
┌ ┍ ┎ ┏  ┬ ┭ ┮ ┯ ┰ ┱ ┲ ┳  ┐ ┑ ┒ ┓
┼ ┽ ┾ ┿  ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇  ╈ ╉ ╊ ╋
└ ┕ ┖ ┗  ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻  ┘ ┙ ┚ ┛
├ ┝ ┞ ┟ ┠ ┡ ┢ ┣   ┤ ┥ ┦ ┧ ┨ ┩ ┪ ┫
╒ ╓ ╔  ╤ ╥ ╦  ╕ ╖ ╗
╞ ╟ ╠  ╪ ╫ ╬  ╡ ╢ ╣
╘ ╙ ╚  ╧ ╨ ╩  ╛ ╜ ╝

┌─┬─┐
│ │ │
├─┼─┤
│ │ │
└─┴─┘





┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ ATSHA204A                                                                                                 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

• Two main features are explored in the ATSHA204A:
  1) Authentication;
  2) Password (secrete keys) storaged;





┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ REFERENCES                                                                                                ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

• ATSHA204A Datasheet;
• AN8752 Secure Password Operations;
• AN8849 Command Sequences;





┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 2.1.1 EEPROM DATA ZONE - 512 BYTES (4kb)                                                                  ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

Table 2-3. Data Zone Slots
┏━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┓
┃ SlotID ┃ Byte Address ┃ Word Address ┃
┣━━━━━━━━╋━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━┫
┃  0x00  ┃    0x0000    ┃    0x0000    ┃
┃  0x01  ┃    0x0020    ┃    0x0008    ┃
┃  0x02  ┃    0x0040    ┃    0x0010    ┃
┃  ...   ┃    ...       ┃    ...       ┃
┃  0x0E  ┃    0x01C0    ┃    0x0070    ┃
┃  0x0F  ┃    0x01E0    ┃    0x0078    ┃
┗━━━━━━━━┻━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━┛





┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 2.1.2 CONFIGURATION ZONE                                                                                  ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
┏━━━━━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ NAME           ┃ SIZE    ┃ DESCRIPTION                                                                    ┃
┣━━━━━━━━━━━━━━━━╋━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ OTP MODE       ┃ 1 BYTE  ┃ 0xAA read-only mode: (OTP locked) write is disabled and read is enabled;       │
┃                ┃         ┃ 0x55 consumption mode: (OTP locked) write causes the bits to change only from  │
┃                ┃         ┃      one to zero, and read is enabled;                                         │
┃                ┃         ┃ 0x00 legacy mode: (OTP locked) write and read are disabled;                    │
┣━━━━━━━━━━━━━━━━╋━━━━━━━━━╉────────────────────────────────────────────────────────────────────────────────┤
┃ SelectorMode   ┃ 1 BYTE  ┃ 0x00 allow Selector to always be updated with UpdateExtra command;             │
┃                ┃         ┃ 0x?? any other value in SelectorMode allow the Selector to be updated only     │
┃                ┃         ┃      once (from 0x00 to any other value) by running UpdateExtra command;       │
┣━━━━━━━━━━━━━━━━╋━━━━━━━━━╉────────────────────────────────────────────────────────────────────────────────┤
┃ Selector       ┃ 1 BYTE  ┃ Byte address 0x85. Keeps device active after running Pause command;            │
┣━━━━━━━━━━━━━━━━╋━━━━━━━━━╉────────────────────────────────────────────────────────────────────────────────┤
┃ UserExtra      ┃ 1 BYTE  ┃ Byte address 0x84. A general purpose non-volatile byte for custom use by host  │
┃                ┃         ┃ system. It can only be update once (from 0x00 to any other value) by running   │
┃                ┃         ┃ UpdateExtra command;                                                           │
┣━━━━━━━━━━━━━━━━╋━━━━━━━━━╉────────────────────────────────────────────────────────────────────────────────┤
┃ CheckMACConfig ┃ 1 BYTE  ┃ This byte applies only to the CheckMAC, Read and Write commands. It specifies  │
┃                ┃         ┃ whether the TempKey should be generated from a random source (0b0) or inserted │
┃                ┃         ┃ from an input (0b1):                                                           │
┃                ┃         ┃ • Read and Write: CheckMACConfig[0] controls Slots[0:1], CheckMACConfig[1]     │
┃                ┃         ┃   controls Slots[2:3] and so on. Any encrypted Read or Write command fails if  │
┃                ┃         ┃   the value in TempKey.SourceFlag does not match the corresponding bit in      │
┃                ┃         ┃   CheckMACConfig;                                                              │
┃                ┃         ┃ • CheckMAC: CheckMACConfig[0] controls Slot[1], CheckMACConfig[1] controls     │
┃                ┃         ┃   Slot[3] and so on. The target Slot contents will only be copied to TempKey   │
┃                ┃         ┃   if the CheckMACSource value corresponding to the target Slot matches the     │
┃                ┃         ┃   value of MODE[2] of the CheckMAC command.                                    │
┃                ┃         ┃ The command fails if MODE[2] does not match TempKey.SourceFlag (it is required │
┃                ┃         ┃ the corresponding bit in CheckMACSource to match TempKey.SourceFlag).          │
┣━━━━━━━━━━━━━━━━╋━━━━━━━━━╉────────────────────────────────────────────────────────────────────────────────┤
┃ SlotConfig     ┃ 2 BYTES ┃ Check section 2.1.2.14;                                                        │
┣━━━━━━━━━━━━━━━━╋━━━━━━━━━╉────────────────────────────────────────────────────────────────────────────────┤
┃ UseFlag        ┃ 1 BYTE  ┃ Limited-use slots: the quantity of 0b1 bits represents the number of times     │
┃                ┃         ┃ that Slots[0:7] may be used before being disabled;                             │
┣━━━━━━━━━━━━━━━━╋━━━━━━━━━╉────────────────────────────────────────────────────────────────────────────────┤
┃ UpdateCount    │ 1 BYTE  ┃ Indicates how many times Slots[0:7] have been updated with DeriveKey;          │
┣━━━━━━━━━━━━━━━━╋━━━━━━━━━╉────────────────────────────────────────────────────────────────────────────────┤
┃ LastKeyUsed    ┃ 1 BYTE  ┃ Each 0b1 bit represents a remaining use for Slot[15]. Applies only if          │
┃                ┃         ┃ SlotConfig[5] LimitedUse is set;                                               │
┣━━━━━━━━━━━━━━━━╋━━━━━━━━━╉────────────────────────────────────────────────────────────────────────────────┤
┃ LockValue      ┃ 1 BYTE  ┃ 0x55 Data and OTP zones are unlocked, writes are enabled;                      │
┃                ┃         ┃ 0x00 Data and OTP zones are locked and take on the access policies defined in  │
┃                ┃         ┃ the Configuration zone;                                                        │
┣━━━━━━━━━━━━━━━━╋━━━━━━━━━╉────────────────────────────────────────────────────────────────────────────────┤
┃ LockConfig     ┃ 1 BYTE  ┃ 0x55 Configuration zone is unlocked and writes are enabled;                    │
┃                ┃         ┃ 0x00 Configuration zone is locked and writes are disabled;                     │
┗━━━━━━━━━━━━━━━━┻━━━━━━━━━┹────────────────────────────────────────────────────────────────────────────────┘


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 2.1.2.14 SlotConfig                                                                                       ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

• Located at bytes [20:51] in Configuration Zone;
• If Data zone is unlocked:
  • no restrictions apply;
  • read and write are enabled for all Slots in Data zone;
• If Data zone is locked, SlotConfig is interpreted according to the table below:

┏━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ BYTE    ┃ NAME        ┃ DESCRIPTION                                                                       ┃
┣━━━━━━━━━╋━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ <15:12> ┃ WriteConfig ┃ Check TABLE 2-6;                                                                  │
┣━━━━━━━━━╋━━━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────────┤
┃ <11:8>  ┃ WriteKey    ┃ SlotID of the key to be used to validate encrypted writes;                        │
┣━━━━━━━━━╋━━━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────────┤
┃ <7>     ┃ IsSecret    ┃ Check TABLE 8-35;                                                                 │
┃         ┃             ┃ 0b0 Plain read and write commands are enabled;                                    │
┃         ┃             ┃     CheckMAC and DeriveKey commands are disabled;                                 │
┃         ┃             ┃ 0b1 Read and write commands, if enabled, must be encrypted;                       │
┣━━━━━━━━━╋━━━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────────┤
┃ <6>     ┃ EncryptRead ┃ Check TABLE 8-35;                                                                 │
┃         ┃             ┃ 0b0 If IsSecret = 0b0, read is enabled.                                           │
┃         ┃             ┃     If IsSecret = 0b1, read is disabled;                                          │
┃         ┃             ┃ 0b1 If IsSecret = 0b0, this state is prohibited;                                  │
┃         ┃             ┃     If IsSecret = 0b1, encrypted read is enabled;                                 │
┃         ┃             ┃       Encryption key is specified in ReadKey;                                     │
┣━━━━━━━━━╋━━━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────────┤
┃ <5>     ┃ LimitedUse  ┃ 0b0 No limit key usage;                                                           │
┃         ┃             ┃ 0b1 Limit key usage according to UseFlag (or LastKeyUsed);                        │
┣━━━━━━━━━╋━━━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────────┤
┃ <4>     ┃ CheckOnly   ┃ 0b0 This slot can be used for all crypto commands;                                │
┃         ┃             ┃ 0b1 This slot can only be used for CheckMAC and GenDig commands;                  │
┣━━━━━━━━━╋━━━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────────┤
┃ <3:0>   ┃ ReadKey     ┃ SlotID of the key to be used for encrypted reads.                                 │
┃         ┃             ┃ If 0x0, this slot can be used as the source slot for the CheckMAC/Copy Command;   │
┗━━━━━━━━━┻━━━━━━━━━━━━━┹───────────────────────────────────────────────────────────────────────────────────┘


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ TABLE 2-6 WriteConfig                                                                                     ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

• This configuration field is shared between DeriveKey and Write commands;

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ DERIVE KEY COMMAND                                                                                        ┃
┣━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
┃ BIT  ┃ DESCRIPTION                                                                                        ┃
┣━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ <15> ┃ 0b0 Disable authorizing MAC;                                                                       |
┃      ┃ 0b1 Enforce authorizing MAC;                                                                       |
┣━━━━━━╉────────────────────────────────────────────────────────────────────────────────────────────────────┤
┃ <14> ┃ Does not care;                                                                                     |
┣━━━━━━╉────────────────────────────────────────────────────────────────────────────────────────────────────┤
┃ <13> ┃ 0b0 Disable DeriveKey command;                                                                     |
┃      ┃ 0b1 Enable DeriveKey command;                                                                      |
┣━━━━━━╉────────────────────────────────────────────────────────────────────────────────────────────────────┤
┃ <12> ┃ 0b0 Source key is specified in PARAM2;                                                             |
┃      ┃ 0b1 Source key is specified in SlotConfig[PARAM2].WriteKey;                                        |
┗━━━━━━┹────────────────────────────────────────────────────────────────────────────────────────────────────┘


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ WRITE COMMAND                                                                                             ┃
┣━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
┃ BIT  ┃ DESCRIPTION                                                                                        ┃
┣━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ <15> ┃ 0b0 Enable write command;                                                                          |
┃ <13> ┃ 0b1 Disable write command;                                                                         |
┣━━━━━━╉────────────────────────────────────────────────────────────────────────────────────────────────────┤
┃ <14> ┃ 0b0 Enable plain write command or disable write command - according to bits <15> and <13>;         |
┃      ┃ 0b1 Enable encrypted write command and enforce authorizing MAC (default);                          |
┣━━━━━━╉────────────────────────────────────────────────────────────────────────────────────────────────────┤
┃ <12> ┃ Does not care;                                                                                     |
┗━━━━━━┹────────────────────────────────────────────────────────────────────────────────────────────────────┘


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ !! IMPORTANT RECOMMENDATIONS FOR SLOTS USED AS STATIC KEYS !!                                             ┃
┃                                                                                                           ┃
┃ • SlotConfig.IsSecret must be set for all slots used as keys, including those edited with DeriveKey;      ┃
┃ • For maximum security:                                                                                   ┃
┃   • SlotConfig.IsSecret set to 0b1;                                                                       ┃
┃   • SlotConfig.WriteConfig set to 0b10X or 0bX01 (disable write);                                         ┃
┃   • SlotConfig.EncryptRead set to 0b0 (disable read);                                                     ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ !! IMPORTANT RECOMMENDATIONS FOR SLOTS USED AS DYNAMIC KEYS !!                                            ┃
┃                                                                                                           ┃
┃ • SlotConfig.IsSecret must be set for all slots used as keys, including those edited with DeriveKey;      ┃
┃ • For maximum security:                                                                                   ┃
┃   • SlotConfig.IsSecret set to 0b1;                                                                       ┃
┃   • SlotConfig.WriteConfig<14> set to 0b1 (enable encrypted write);                                       ┃
┃   • SlotConfig.WriteKey should point back to the same slot;                                               ┃
┃     • A write command can assign a new value, provided an authentication MAC using the old key;           ┃
┃   • SlotConfig.EncryptRead set to 0b0 (read disabled);                                                    ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛





┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 8.5 COMMAND SEQUENCE                                                                                      ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 8.5.1 COMMAND PACKETS                                                                                     ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┏━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ NAME    ┃ BYTE     ┃ DESCRIPTION                                                                          ┃
┣━━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ COMMAND ┃ [0]      ┃ 0x00 Reset the address counter.                                                      │
┃         ┃          ┃      The next read or write starts with the beginning of the I/O buffer;             │
┃         ┃          ┃ 0x01 Sleep (Low Power): goes into low-power sleep mode and ignores all subsequent    │
┃         ┃          ┃      I/O transitions until the next Wake flag. The entire volatile state of the      │
┃         ┃          ┃       device is reset;                                                               │
┃         ┃          ┃ 0x02 Idle: goes into the idle state and ignores all subsequent I/O transitions       │
┃         ┃          ┃      until the next Wake flag. The contents of TempKey and RNG Seed registers are    │
┃         ┃          ┃      retained;                                                                       │
┃         ┃          ┃ 0x03 Write: subsequent bytes to sequential addresses in the input command buffer     │
┃         ┃          ┃      that follow previous writes. This is the normal operation;                      │
┃         ┃          ┃ 0x04:0xFF These addresses should not be sent to the device;                          │
┣━━━━━━━━━╋━━━━━━━━━━╉──────────────────────────────────────────────────────────────────────────────────────┤
┃ SIZE    ┃ [1]      ┃ Includes SIZE, OPCODE, PARAM1, PARAM2, DATA and CRC. Does not include Command Flag;  │
┣━━━━━━━━━╋━━━━━━━━━━╉──────────────────────────────────────────────────────────────────────────────────────┤
┃ OPCODE  ┃ [2]      ┃ Operation being called;                                                              │
┣━━━━━━━━━╋━━━━━━━━━━╉──────────────────────────────────────────────────────────────────────────────────────┤
┃ PARAM1  ┃ [3]      ┃ One byte parameter always present;                                                   │
┣━━━━━━━━━╋━━━━━━━━━━╉──────────────────────────────────────────────────────────────────────────────────────┤
┃ PARAM2  ┃ [4:5]    ┃ Two bytes parameter always present;                                                  │
┣━━━━━━━━━╋━━━━━━━━━━╉──────────────────────────────────────────────────────────────────────────────────────┤
┃ DATA    ┃ VARIABLE ┃ Optional data based on command being called;                                         │
┣━━━━━━━━━╋━━━━━━━━━━╉──────────────────────────────────────────────────────────────────────────────────────┤
┃ CRC-16  ┃ [N-1:N]  ┃ Polynomial 0x8005. Includes SIZE, OPCODE, PARAM1, PARAM2 and DATA.                   │
┃         ┃          ┃ Does not include Command Flag;                                                       │
┗━━━━━━━━━┻━━━━━━━━━━┹──────────────────────────────────────────────────────────────────────────────────────┘





┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 8.5.12 NONCE COMMAND                                                                                      ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ INPUT PARAMETERS                                                                                          ┃
┣━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ OPCODE ┃ MAC   ┃ 1 BYTE         ┃ 0x16                                                                    │
┣━━━━━━━━╋━━━━━━━╋━━━━━━━━━━━━━━━━╉─────────────────────────────────────────────────────────────────────────┤
┃ PARAM1 ┃ MODE  ┃ 1 BYTE         ┃ <7:2> Must be zero;                                                     │
┃        ┃       ┃                ┃ <1:0> 0b00: Combine the new random number (RandOut) with NumIn, and     │
┃        ┃       ┃                ┃             store the result in TempKey. Automatically update EEPROM    │
┃        ┃       ┃                ┃             seed only if necessary prior to random number generation    │
┃        ┃       ┃                ┃             (recommended for highest security);                         │
┃        ┃       ┃                ┃       0b01: Combine the new random number (RandOut) with NumIn, store   │
┃        ┃       ┃                ┃             in TempKey. Generate random number using existing EEPROM    │
┃        ┃       ┃                ┃             seed, do not update EEPROM seed;                            │
┃        ┃       ┃                ┃       0b10: Invalid;                                                    │
┃        ┃       ┃                ┃       0b11: Pass-through mode. NumIn is directly assigned to TempKey;   │
┣━━━━━━━━╋━━━━━━━╋━━━━━━━━━━━━━━━━╉─────────────────────────────────────────────────────────────────────────┤
┃ PARAM2 ┃ ZERO  ┃ 2 BYTES        ┃ Must be zero (0x0000);                                                  │
┣━━━━━━━━╋━━━━━━━╋━━━━━━━━━━━━━━━━╉─────────────────────────────────────────────────────────────────────────┤
┃ DATA   ┃ NumIn ┃ 20 or 32 BYTES ┃ A random number generated by the external system - Most probably it     │
┃        ┃       ┃                ┃ will always be 20 bytes long;                                           │
┗━━━━━━━━┻━━━━━━━┻━━━━━━━━━━━━━━━━┹─────────────────────────────────────────────────────────────────────────┘


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ OUTPUT PARAMETERS                                                                                         ┃
┣━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ RandOut ┃ 1 OR 32 BYTES ┃ if MODE<1:0> is 0b00 or 0b01, RandOut is the output of the RNG (32 bytes);      │
┃         ┃               ┃ if MODE<1:0> is 0b11, RandOut is a single byte with a value of 0x00;            │
┗━━━━━━━━━┻━━━━━━━━━━━━━━━┹─────────────────────────────────────────────────────────────────────────────────┘


• Generates a nonce and a 32-bytes random number;
  • This nonce will be used for GenDig, MAC, HMAC, Read, or Write commands;

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Nonce is the SHA-256 of the following respective bytes:                                                   ┃
┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
┃ • 32 bytes RandOut;                                                                                       ┃
┃ • 20 bytes NumIn;                                                                                         ┃
┃ •  1 byte  OPCODE (always 0x16);                                                                          ┃
┃ •  1 byte  MODE;                                                                                          ┃
┃ •  1 byte  LSb of PARAM2 (always 0x00);                                                                   ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

• NumIn is a random input value designed to prevent replay attacks (?);
• The generated random number (RandOut - 32 bytes) is returned to the system after Nonce command execution;

• The resulting digest (nonce) is always stored in the TempKey register;
  • There is no way to read the TempKey, but it is possible to the external system to compute this digest
     value and store it;
  • TempKey.Valid is set to 0b1;
  • TempKey.SourceFlag is set to “Rand” (0b0);

• Pass-through mode alternative:
  • NumIn input value must be 32 bytes long and it is passed directly to TempKey without modification;
  • No SHA-256 calculation is performed;
  • TempKey.SourceFlag is set to “Input”;
  • The nonce value in TempKey may not be used with Read or Write commands;
  • In case of a repeated input number value, the device provides no protection against replay attacks;





┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 8.5.8 GENDIG COMMAND                                                                                      ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ INPUT PARAMETERS                                                                                          ┃
┣━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ OPCODE ┃ GenDig    ┃ 1 BYTE       ┃ 0x15                                                                  │
┣━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────┤
┃ PARAM1 ┃ ZONE      ┃ 1 BYTE       ┃ <1:0> 0b00 Configuration Zone. Obs.: Slots[0:1] are available;        │
┃        ┃           ┃              ┃       0b01 OTP Zone.           Obs.: Slots[0:1] are available;        │
┃        ┃           ┃              ┃       0b10 Data Zone.          Obs.: Slots[0:16] are available;       │
┣━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────┤
┃ PARAM2 ┃ SlotID    ┃ 2 BYTES      ┃ slot identification number;                                           │
┣━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────┤
┃  DATA  ┃ OtherData ┃ 0 or 4 BYTES ┃ if CheckOnly = 1, use as random data for SHA-256 output;              │
┃        ┃           ┃              ┃ if CheckOnly = 0, ignore this field;                                  │
┗━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━━━━┹───────────────────────────────────────────────────────────────────────┘


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ OUTPUT PARAMETERS                                                                                         ┃
┣━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ Success ┃ 1 BYTE ┃ returns 0 if successful;                                                               │
┗━━━━━━━━━┻━━━━━━━━┹────────────────────────────────────────────────────────────────────────────────────────┘

• Use SHA-256 to combine a SlotID from [Configuration:OTP:Data] Zone with TempKey;
  • Run GenDig only after running Nonce command;
  • If ZONE is 0b10 (Data Zone) and SlotID is [0:15]:
    • TempKey.GenData is set to 0b1;
    • TempKey.SlotID is set to the input SlotID;
  • If ZONE is not 0b10 (Data Zone):
    • TempKey.GenData is set to 0b0;
  • The result is stored in TempKey and can NEVER be read from the device;
  • TempKey.Valid bit is set (TempKey.Valid bit is cleared when the next command is executed);

• If the CheckOnly bit is set, it means that the device is a Host, and GenDig can be used to generate keys
  that would match those generated on Clients using the DeriveKey command;
  • The OPCODE and PARAM[1:2] bytes are replaced with the OtherData 4 bytes;

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Generates a new 32-bytes value for TempKey:                                                               ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
│ • 32 bytes Config[SlotID] or OTP[SlotID] or Data.slot[SlotID] or TransportKey[SlotID];                    │
│ •  1 byte  OPCODE (always 0x15) or OtherData[0];                                                          │
│ •  1 byte  PARAM1 or OtherData[1];                                                                        │
│ •  2 bytes PARAM2 or OtherData[2:3];                                                                      │
│ •  1 byte  SN[8];                                                                                         │
│ •  2 bytes SN[0:1];                                                                                       │
│ • 25 bytes Zeros;                                                                                         │
│ • 32 bytes TempKey.value;                                                                                 │
└───────────────────────────────────────────────────────────────────────────────────────────────────────────┘





┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 8.5.1 MAC COMMAND                                                                                         ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ INPUT PARAMETERS                                                                                          ┃
┣━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ OPCODE ┃ MAC       ┃ 1 BYTE        ┃ 0x08                                                                 │
┣━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━━━━━╉──────────────────────────────────────────────────────────────────────┤
┃ PARAM1 ┃ MODE      ┃ 1 BYTE        ┃ <7> must be zero;                                                    │
┃        ┃           ┃               ┃ <6> 0b0 use zero instead of SN[2:3] and SN[4:7];                     │
┃        ┃           ┃               ┃     0b1 use SN[2:3] and SN[4:7];                                     │
┃        ┃           ┃               ┃ <5> if MODE[4] is set to 0b1, this bit is ignored;                   │
┃        ┃           ┃               ┃     0b0 use zero instead of OTP[0:7];                                │
┃        ┃           ┃               ┃     0b1 use OTP[0:7];                                                │
┃        ┃           ┃               ┃ <4> 0b0 use zero instead of OTP[0:10];                               │
┃        ┃           ┃               ┃     0b1 use OTP[0:10];                                               │
┃        ┃           ┃               ┃ <3> must be zero;                                                    │
┃        ┃           ┃               ┃ <2> if MODE[1] or MODE[0] is set, MODE[2] must match the value in    │
┃        ┃           ┃               ┃     TempKey.SourceFlag;                                              │
┃        ┃           ┃               ┃ <1> 0b0 the first 32 bytes are loaded from one of the Data slots;    │
┃        ┃           ┃               ┃     0b1 the first 32 bytes are loaded from TempKey;                  │
┃        ┃           ┃               ┃ <0> 0b0 the second 32 bytes are loaded from input Challenge;         │
┃        ┃           ┃               ┃     0b1 the second 32 bytes are loaded from TempKey (recommended for │
┃        ┃           ┃               ┃         highest security);                                           │
┣━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━━━━━╉──────────────────────────────────────────────────────────────────────┤
┃ PARAM2 ┃ SlotID    ┃ 2 BYTES       ┃ slot identification number;                                          │
┣━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━━━━━╉──────────────────────────────────────────────────────────────────────┤
┃  DATA  ┃ Challenge ┃ 0 or 32 BYTES ┃ if MODE[0] = 1, this field is ignored;                               │
┃        ┃           ┃               ┃ if MODE[0] = 0, input portion of message to be digested;             │
┗━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━━━━━┹──────────────────────────────────────────────────────────────────────┘


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ OUTPUT PARAMETERS                                                                                         ┃
┣━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ Response ┃ 32 BYTES ┃ SHA-256 digest;                                                                     │
┗━━━━━━━━━━┻━━━━━━━━━━┹─────────────────────────────────────────────────────────────────────────────────────┘

• Computes SHA-256 from a stored key, a challenge and other information in the device;
• Command flow:
  1) Run Nonce command;
  2) Run GenDig command (optional);
  3) Run Mac command to combine the output of step 1 (or step 2) with an EEPROM key to generate a digest;

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Generates a new 32-bytes digest:                                                                          ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
│ • 32 bytes Data.slot[SlotID] or TempKey;                                                                  │
│ • 32 bytes Challenge or TempKey;                                                                          │
│ •  1 byte  OPCODE (always 0x08);                                                                          │
│ •  1 byte  MODE;                                                                                          │
│ •  2 bytes PARAM2;                                                                                        │
│ •  8 bytes OTP[0:7] or zeros;                                                                             │
│ •  3 bytes OTP[8:10] or zeros;                                                                            │
│ •  1 byte  SN[8];                                                                                         │
│ •  4 bytes SN[4:7] or zeros;                                                                              │
│ •  2 bytes SN[0:1];                                                                                       │
│ •  2 bytes SN[2:3] or zeros;                                                                              │
└───────────────────────────────────────────────────────────────────────────────────────────────────────────┘





┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 8.5.5 CHECKMAC COMMAND                                                                                    ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ INPUT PARAMETERS                                                                                          ┃
┣━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ OPCODE ┃ MAC        ┃ 1 BYTE   ┃ 0x28                                                                     │
┣━━━━━━━━╋━━━━━━━━━━━━╋━━━━━━━━━━╉──────────────────────────────────────────────────────────────────────────┤
┃ PARAM1 ┃ MODE       ┃ 1 BYTE   ┃ <7:6> must be zero;                                                      │
┃        ┃            ┃          ┃   <5> 0b0 use zeros;                                                     │
┃        ┃            ┃          ┃       0b1 use OTP Zone;                                                  │
┃        ┃            ┃          ┃ <4:3> must be zero;                                                      │
┃        ┃            ┃          ┃   <2> if TempKey is used, match this bit with TempKey.SourceFlag;        │
┃        ┃            ┃          ┃   <1> 0b0 use a Slot from Data Zone;                                     │
┃        ┃            ┃          ┃       0b1 use TempKey;                                                   │
┃        ┃            ┃          ┃   <0> 0b0 use ClientChal parameter;                                      │
┃        ┃            ┃          ┃       0b1 use TempKey;                                                   │
┣━━━━━━━━╋━━━━━━━━━━━━╋━━━━━━━━━━╉──────────────────────────────────────────────────────────────────────────┤
┃ PARAM2 ┃   SlotID   ┃ 2 BYTES  ┃ slot identification number;                                              │
┣━━━━━━━━╋━━━━━━━━━━━━╋━━━━━━━━━━╉──────────────────────────────────────────────────────────────────────────┤
┃ DATA1  ┃ ClientChal ┃ 32 BYTES ┃ Challenge sent to Client;                                                │
┣━━━━━━━━╋━━━━━━━━━━━━╋━━━━━━━━━━╉──────────────────────────────────────────────────────────────────────────┤
┃ DATA2  ┃ ClientResp ┃ 32 BYTES ┃ Response generated by the Client;                                        │
┣━━━━━━━━╋━━━━━━━━━━━━╋━━━━━━━━━━╉──────────────────────────────────────────────────────────────────────────┤
┃ DATA3  ┃ OtherData  ┃ 13 BYTES ┃     [0] MAC OPCODE 0x08;                                                 │
┃        ┃            ┃          ┃     [1] MODE used in MAC command;                                        │
┃        ┃            ┃          ┃   [2:3] SlotID used in MAC command;                                      │
┃        ┃            ┃          ┃   [4:6] OTP[8:10] used in MAC command;                                   │
┃        ┃            ┃          ┃  [7:10] SN[4:7] used in MAC command;                                     │
┃        ┃            ┃          ┃ [11:12] SN[2:3] used in MAC command;                                     │
┗━━━━━━━━┻━━━━━━━━━━━━┻━━━━━━━━━━┹──────────────────────────────────────────────────────────────────────────┘


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ OUTPUT PARAMETERS                                                                                         ┃
┣━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ Result ┃ 1 BYTE ┃ returns 0b0 on success match, or 0b1 on case of a mismatch;                             │
┗━━━━━━━━┻━━━━━━━━┹─────────────────────────────────────────────────────────────────────────────────────────┘


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Generates a new 32-bytes digest:                                                                          ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
│ • 32 bytes Data.slot[SlotID] or TempKey;                                                                  │
│ • 32 bytes ClientChal or TempKey;                                                                         │
│ •  4 bytes OtherData[0:3];                                                                                │
│ •  8 bytes OTP[0:7] or zeros;                                                                             │
│ •  3 bytes OtherData[4:6];                                                                                │
│ •  1 byte  SN[8];                                                                                         │
│ •  4 bytes OtherData[7:10];                                                                               │
│ •  2 bytes SN[0:1];                                                                                       │
│ •  2 bytes OtherData[11:12];                                                                              │
└───────────────────────────────────────────────────────────────────────────────────────────────────────────┘


• The CheckMAC command calculates a MAC response that would have been generated on a CryptoAuthentication
  device and compares the MAC response with some input value;
  • Returns a Boolean result to indicate the success or failure of the comparison;
  • Prior to running this command, the Nonce and/or GenDig commands may have been optionally run to create
    and load a key or nonce value in TempKey;
    • Mode[2] = 0b1: TempKey was generated using Nonce(Fixed) (vulnerable to replay attacks - DO NOT USE!);
    • Mode[2] = 0b0: TempKey was generated using Nonce(Random);

• If the comparison matches, then the target slot value may be copied into TempKey;
  • If SlotID is even, then the target slot is SlotID + 1, or else the target slot is SlotID;
  • For the copy to take place, the following conditions must be true (if they are not all true, the result
    is returned to the host, but the target key value is not copied into TempKey):
    1. The MODE parameter to CheckMAC must have a value of 0x01 or 0x05;
      • 0x01 is preferable as it forces TempKey to be Random;
    2. SlotConfig.ReadKey for the target key (SlotID + 1) MUST BE ZERO;
    3. The bit in Config.CheckMACSource must match MODE[2];

• The CheckMACConfig associated with the SlotID + 1 (the Data Slot that storages the password key) must be
  set to 0b0 (always force the use of a Random TempKey);


13.3.6 Password Checking
  • If the device determines that the correct password has been entered, then the device can use this fact to
   optionally release a secondary high entropy secret;
  • Passwords should be stored in even-numbered slots;
    • If the password is to be mapped to a secondary secret, then the target slot containing this value is
      located in the next higher slot number (the password slot number plus one);
  • ONLY for PASSWORD CHECKING (CheckMAC command) set SlotConfig.ReadKey to 0b0 for the target SlotID;
    • For ALL OTHER PURPOSES, the SlotConfig.ReadKey MUST be SET TO 0b1;
  • MODE parameter in CheckMAC command must have a value of 0x01 or 0x05;
  • MODE[2] parameter in CheckMAC command must match TempKey.SourceFlag;





┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 8.5.15 READ COMMAND                                                                                       ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ INPUT PARAMETERS                                                                                          ┃
┣━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ OPCODE ┃ MAC       ┃ 1 BYTE  ┃ 0x02                                                                       │
┣━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━╉────────────────────────────────────────────────────────────────────────────┤
┃ PARAM1 ┃ ZONE      ┃ 1 BYTE  ┃   <7> 0b0 4 bytes;                                                         │
┃        ┃           ┃         ┃       0b1 32 bytes;                                                        │
┃        ┃           ┃         ┃ <6:2> must be zero;                                                        │
┃        ┃           ┃         ┃ <1:0> 0b00 Configuration Zone;                                             │
┃        ┃           ┃         ┃       0b01 OTP Zone;                                                       │
┃        ┃           ┃         ┃       0b10 Data Zone;                                                      │
┣━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━╉────────────────────────────────────────────────────────────────────────────┤
┃ PARAM2 ┃ ADDRESS   ┃ 2 BYTES ┃ address of the first word to be read;                                      │
┗━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━┹────────────────────────────────────────────────────────────────────────────┘


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ OUTPUT PARAMETERS                                                                                         ┃
┣━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ Contents ┃ 4 or 32 BYTES ┃ the contents of the specified memory location;                                 │
┗━━━━━━━━━━┻━━━━━━━━━━━━━━━┹────────────────────────────────────────────────────────────────────────────────┘


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ TABLE 8-35 READ OPERATION PERMISSION                                                                      ┃
┣━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
┃  IsSecret   ┃ EncryptRead ┃ Description                                                                   ┃
┣━━━━━━━━━━━━━╋━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ 0           ┃ 0           ┃ Clear read always allowed. Do not use this slot to store a password;          │
┣━━━━━━━━━━━━━╋━━━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ 0           ┃ 1           ┃ Prohibited;                                                                   │
┣━━━━━━━━━━━━━╋━━━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ 1           ┃ 0           ┃ Read disabled. Slots in this state can still be used to store a password;     │
┣━━━━━━━━━━━━━╋━━━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ 1           ┃ 1           ┃ Read encrypted - encryption key is specified in ReadKey;                      │
┗━━━━━━━━━━━━━┻━━━━━━━━━━━━━┹───────────────────────────────────────────────────────────────────────────────┘

• Run the following commands prior to any encrypted read in order to set TempKey flags as follows:
  • TempKey.Valid   = 1                  - run Nonce with MODE = 0x00 or 0x01;
  • TempKey.GenData = 1                  - run GenDig;
  • TempKey.SlotID  = SlotConfig.ReadKey - run GenDig with SlotID = Slot[ADDRESS].SlotConfig.ReadKey;

• CONCERNING ENCRYPTED DATA:
  • The device XOR the data with the current TempKey;
  • Encrypted reads of the Configuration and/or OTP zones are not permitted;

• READ EXAMPLE:
  • read configuration zone: {COMMAND, COUNT, OPCODE, ZONE, ADDRESS_1, ADDRESS_2, CRC_LSB, CRC_MSB}
  • read configuration zone: { 0x03,    0x07,   0x02, 0x00,      0x00,      0x00,    0xB2,    0x7E}





┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 8.5.18 WRITE COMMAND                                                                                      ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ INPUT PARAMETERS                                                                                          ┃
┣━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ OPCODE ┃ MAC       ┃ 1 BYTE        ┃ 0x12                                                                 │
┣━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━━━━━╉──────────────────────────────────────────────────────────────────────┤
┃ PARAM1 ┃ ZONE      ┃ 1 BYTE        ┃   [7] 0b0 4 bytes;                                                   │
┃        ┃           ┃               ┃       0b1 32 bytes;                                                  │
┃        ┃           ┃               ┃   [6] 0b0 plain data;                                                │
┃        ┃           ┃               ┃       0b1 encrypted data;                                            │
┃        ┃           ┃               ┃ [5:2] must be zero;                                                  │
┃        ┃           ┃               ┃ [1:0] 0b00 Configuration Zone;                                       │
┃        ┃           ┃               ┃       0b01 OTP Zone;                                                 │
┃        ┃           ┃               ┃       0b10 Data Zone;                                                │
┣━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━━━━━╉──────────────────────────────────────────────────────────────────────┤
┃ PARAM2 ┃ ADDRESS   ┃ 2 BYTES       ┃ address of the first word to be written;                             │
┣━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━━━━━╉──────────────────────────────────────────────────────────────────────┤
┃ DATA_1 ┃ VALUE     ┃ 4 or 32 BYTES ┃ information to be written to the zone (may be encrypted);            │
┣━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━━━━━╉──────────────────────────────────────────────────────────────────────┤
┃ DATA_2 ┃ MAC       ┃ 0 or 32 BYTES ┃ message authentication cod to validate address data;                 │
┗━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━━━━━┹──────────────────────────────────────────────────────────────────────┘


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ OUTPUT PARAMETERS                                                                                         ┃
┣━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ Success ┃ 1 BYTE ┃ returns 0b0 on success;                                                                │
┗━━━━━━━━━┻━━━━━━━━┹────────────────────────────────────────────────────────────────────────────────────────┘

• CONCERNING ENCRYPTED DATA:
  • The host XOR the data with the current TempKey. The result will be put in DATA_1;
    • The device XOR DATA_1 with the current TempKey to restore the data, prior to writing to the EEPROM;
    • An authorizing input MAC is always required when writing the Data Zone:
      SHA-256(TempKey, Opcode, Param1, Param2, SN<8>, SN<0:1>, <25 bytes of 0’s>, PlainTextData)
      • Prior to locking the OTP/Data zones, ZONE[6] is used to indicate to the device whether or not the
        input data is encrypted;
      • After locking of the OTP/Data zones, ZONE[6] is ignored and SlotConfig[14] corresponding to the slot
        being written is used to determine whether or not the input data is encrypted;
        • If data encryption is indicated, then TempKey must be valid prior to this command being called and
          it must be the result of GenDig (both TempKey.Valid and TempKey.GenDig must be 0b1).
      • Prior to locking the OTP/Data zones, any key can be used to generate TempKey;
      • After locking of the OTP/Data zones, the last slot used by GenDig for TempKey creation and stored in
        TempKey.SlotID must match that in SlotConfig.WriteKey;
        • If the slot number being written is even, then TempKey.SourceFlag must be RAND;
        • If the slot number is odd, then TempKey.SourceFlag must match the value in Config.CheckMACSource
          corresponding to the slot.

  -> Apparently, ONLY EVEN slots might be used for storing passwords;





┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 1.3 CRYPTOGRAPHIC OPERATIONS                                                                              ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

• RULE OF THUMB: any command that uses a SlotID as input parameter is a cryptographic command;
  • Exception: encrypted Read and Write commands do not decrement UseFlag;
  • Exception: DeriveKey command ignores LimitedUse and UseFlag if the target is the SlotID itself;

• The following commands will decrement the UseFlag respective to SlotID:
  • MAC;
  • GenDig;
  • DeriveKey;
  • CheckMAC;





• Slots in Data Zone have the following features:

┏━━━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ FEATURE          ┃ SYMBOL ┃ DESCRIPTION                                                                   ┃
┣━━━━━━━━━━━━━━━━━━╋━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ READ             ┃   R    ┃ Plain slot read operation;                                                    │
┣━━━━━━━━━━━━━━━━━━╋━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ WRITE            ┃   W    ┃ Plain slot write operation;                                                   │
┣━━━━━━━━━━━━━━━━━━╋━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ READ ENCRYPTION  ┃   X    ┃ Encryption for read operation - must set IS-SECRET;                           │
┣━━━━━━━━━━━━━━━━━━╋━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ WRITE ENCRYPTION ┃   Y    ┃ Encryption for write operation - must set IS-SECRET;                          │
┣━━━━━━━━━━━━━━━━━━╋━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ IS-SECRET        ┃   S    ┃ Enforce encryption;                                                           │
┣━━━━━━━━━━━━━━━━━━╋━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ CHECK-ONLY       ┃   C    ┃ Restrict use to CheckMAC and GenDig+CheckMAC commands;                        │
┣━━━━━━━━━━━━━━━━━━╋━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ LIMITED-USE      ┃   L    ┃ Restrict use to UseFlag value;                                                │
┣━━━━━━━━━━━━━━━━━━╋━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ DERIVABLE-ROLL   ┃   R    ┃ Derive slot contents from its own value;                                      │
┣━━━━━━━━━━━━━━━━━━╋━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ DERIVABLE-CREATE ┃   N    ┃ Derive slot contents from its parents value;                                 │
┗━━━━━━━━━━━━━━━━━━┻━━━━━━━━┹───────────────────────────────────────────────────────────────────────────────┘


┏━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ R ┃ W ┃ X ┃ Y ┃ S ┃ C ┃ L ┃ R ┃ N ┃ Function                                                              ┃
┡━━━╇━━━╇━━━╇━━━╇━━━╇━━━╇━━━╇━━━╇━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
│ 1 │ 1 │ 0 │ 0 │ 0 │ 0 │ 0 │ 0 │ 0 │ Standard slot for plain data storage;                                 │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───────────────────────────────────────────────────────────────────────┤
│ 1 │ 1 │ 1 │ 1 │ 1 │ 0 │ 0 │ 0 │ 0 │ Encrypted data storage;                                               │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───────────────────────────────────────────────────────────────────────┤
│ 0 │ 0 │ 0 │ 0 │ 1 │ 0 │ 0 │ 0 │ 0 │ Authentication;                                                       │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───────────────────────────────────────────────────────────────────────┤
│ 0 │ 0 │ 0 │ 0 │ 1 │ ? │ ? │ 0 │ 0 │ Password mapping - shared password storage;                           │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───────────────────────────────────────────────────────────────────────┤
│ 0 │ 0 │ 0 │ 0 │ 1 │ 1 │ 1 │ 0 │ 0 │ Password mapping - secret storage;                                    │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───────────────────────────────────────────────────────────────────────┤
│ 0 │ 0 │ 0 │ 0 │ 1 │ 0 │ 0 │ 1 │ 0 │ Derive key from itself (roll key);                                    │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───────────────────────────────────────────────────────────────────────┤
│ 0 │ 0 │ x │ y │ 1 │ 0 │ 0 │ 0 │ 1 │ Derive key from parent (create key);                                  │
└───┴───┴───┴───┴───┴───┴───┴───┴───┴───────────────────────────────────────────────────────────────────────┘

• NOTE: A Data Slot with any Derivable (roll or create) feature enabled or with the authorizing MAC feature
        enabled will disable the Write command;
  • However, it can still be writable if EncryptWrite (SlotConfig[14]) is enabled;

• CHECK-ONLY feature in Password Mapping: the AN8849 Command Sequences defines that the CHECK-ONLY feature
  be enabled in order to protect against exahustive attack - the main issue seems to be to block MAC command;
  • If CHECK-ONLY is enabled, will an encrypted read command succeed?

• LIMITED-USE feature in Password Mapping: the AN8849 Command Sequences defines that the LIMITED-USE feature
  be disabled in order to be used many times with CheckMAC command;
  • It is probably possible to enable LIMITED-USE, reminded the keys change every eight crypto commands;
  • If its value is lost it might never be recovered;





┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ VALIDATION TEST: READABLE KEYS AND LIMITED-USED TEST                                                      ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

• NOTE:
  • The DeriveKey feature enforce use of encryption for write and consequently read commands;
  • Encryption keys are editable in order to validate features;
  • A WriteKey or ReadKey that points to itself implies that the host should know its value prior to issue
    the command - if its value is lost, most problably it can not be read (and consequently) changed;

• Default UseFlags[0:7] are set to 0xFF (eight uses), except;
  • SECRET Slots must set UseFlag to 0x00;

• For all Data Slots, TempKey should be a random number internally generated:

┏━━━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ CheckMACConfig ┃ VALUE ┃ DESCRIPTION                                                                      ┃
┣━━━━━━━━━━━━━━━━╋━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ Read and Write ┃ 0x00  ┃ Any encrypted Read or Write command, or CheckMAC command must be issued from an  │
┣━━━━━━━━━━━━━━━━┫       ┃ internally generated random number;                                              │
┃ CheckMAC       ┃       ┃                                                                                  │
┗━━━━━━━━━━━━━━━━┻━━━━━━━┹──────────────────────────────────────────────────────────────────────────────────┘


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ DATA ZONE MAP                                                                                             ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┏━━━━━━━━┳━━━━━━━━━━━━━━━┓ ┏━━━━━━━━┳━━━━━━━━━━━━━━━┓
┃ SlotID ┃ NAME          ┃ ┃ SlotID ┃ NAME          ┃
┣━━━━━━━━╋━━━━━━━━━━━━━━━┩ ┣━━━━━━━━╋━━━━━━━━━━━━━━━┩
┃ 0x00   ┃ WritePwd1     │ ┃ 0x01   ┃ ReadPwd1      │
┣━━━━━━━━╉───────────────┤ ┣━━━━━━━━╉───────────────┤
┃ 0x02   ┃ DATA0         │ ┃ 0x03   ┃ DATA1         │
┣━━━━━━━━╉───────────────┤ ┣━━━━━━━━╉───────────────┤
┃ 0x04   ┃ PASSWORD1     │ ┃ 0x05   ┃ SECRET1       │
┣━━━━━━━━╉───────────────┤ ┣━━━━━━━━╉───────────────┤
┃ 0x06   ┃ PASSWORD2     │ ┃ 0x07   ┃ SECRET2       │
┣━━━━━━━━╉───────────────┤ ┣━━━━━━━━╉───────────────┤
┃ 0x08   ┃ ReadPwd2      │ ┃ 0x09   ┃ WritePwd2     │
┣━━━━━━━━╉───────────────┤ ┣━━━━━━━━╉───────────────┤
┃ 0x0A   ┃ DATA2         │ ┃ 0x0B   ┃ DATA3         │
┣━━━━━━━━╉───────────────┤ ┣━━━━━━━━╉───────────────┤
┃ 0x0C   ┃ PASSWORD3     │ ┃ 0x0D   ┃ SECRET3       │
┣━━━━━━━━╉───────────────┤ ┣━━━━━━━━╉───────────────┤
┃ 0x0E   ┃ MASTERKEY     │ ┃ 0x0F   ┃ DATA4         │
┗━━━━━━━━┹───────────────┘ ┗━━━━━━━━┹───────────────┘

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 00 01 02 03 04 05 06 07 08 09 0A 00 01 02 03 04 05 06 07 08 09 0A 00 01 02 03 04 05 06 07 08 09           ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
• WritePwd1: (DERIVE KEY) encrypted read/write, derivable from itself;
  • WriteConfig: 0b0110: Disable authorizing MAC; Enable encrypted write; Enable DeriveKey from itself;
  • WriteKey   : 0x00  : Write encryption key or Parent Key;
  • IsSecret   : 1     : Enforce encryption;
  • EncryptRead: 1     : Enable encrypted read;
  • SingleUse  : 1     : Limit use according to UseFlag;
  • CheckOnly  : 0     : Enable use for any command;
  • ReadKey    : 0x09  : Read encryption key - WritePwd2;

  // WritePwd1
	  // comando para configuração da zona de configuração do slot
	  uint8_t configCommand[] = {0x03, 0x0B, 0x12, 0x00, 0x05, 0x00, 0x60, 0xE9, 0x61, 0xF0, 0x09, 0xA8};
	  /*
	  0b0110 (bits 15 -> 12)
	  0b0000 (11 -> 8 )
	  0b1
	  0b1
	  0b1
	  0x0
	  0x1001
	  0b0110 0000 1110 1001 -> 0x60E9
	  */
	  HAL_I2C_Master_Transmit(&hi2c2, 0xC8, configCommand, sizeof(configCommand), 1000);
	  HAL_Delay(5);

	  // leitura zona de configuraçao
	  // para leitura: 0 byte read - should receive an ACK
	  HAL_I2C_Master_Receive(&hi2c2, 0xC8, &data, 1, 1000);
	  HAL_Delay(5);

	  // READ SERIAL NUMBER + CONFIG ZONE
	  HAL_I2C_Master_Transmit(&hi2c2, 0xC8, &data, sizeof(data), 1000);		// Envia 1 byte
	  HAL_Delay(5);
	  HAL_I2C_Master_Transmit(&hi2c2, 0xC8, readCommand, 8, 1000); 		    // Enviar o comando de leitura
	  HAL_Delay(5);
	  HAL_I2C_Master_Receive(&hi2c2, 0xC8, data_rec3, 32, 1000); 	         // Recebe(byte de tamanho, 35 em decimal)..0x01 0x23...
	  HAL_Delay(5);
  //

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 10 11 12 13 14 15 16 17 18 19 1A 10 11 12 13 14 15 16 17 18 19 1A 10 11 12 13 14 15 16 17 18 19           ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
• ReadPwd1: (CREATE KEY) encrypted read/write, derivable from WritePwd1;
  • WriteConfig: 0b0111: Disable authorizing MAC; Enable encrypted write; Enable DeriveKey from Parent Key;
  • WriteKey   : 0x00  : Write encryption key or Parent Key;
  • IsSecret   : 1     : Enforce encryption;
  • EncryptRead: 1     : Enable encrypted read;
  • SingleUse  : 1     : Limit use according to UseFlag;
  • CheckOnly  : 0     : Enable use for any command;
  • ReadKey    : 0x08  : Read encryption key - ReadPwd2;

0b0111
0b0000
0b1
0b1
0b1
0b0
0b1000  -> 0b0111 0000 1110 1000 -> 0x70E8

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 20 21 22 23 24 25 26 27 28 29 2A 20 21 22 23 24 25 26 27 28 29 2A 20 21 22 23 24 25 26 27 28 29           ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
• DATA0: encrypted read/write;
  • WriteConfig: 0b0100: Disable authorizing MAC; Enable encrypted write; Disable DeriveKey;
  • WriteKey   : 0x00  : Write encryption key;
  • IsSecret   : 1     : Enforce encryption;
  • EncryptRead: 1     : Enable encrypted read;
  • SingleUse  : 1     : Limit use according to UseFlag;
  • CheckOnly  : 0     : This Data Slot can be used for any command;
  • ReadKey    : 0x01  : Probably does not care - ReadPwd1;

0b0100
0b0000
0b1
0b1
0b1
0b0
0b0001 -> 0b0100 0000 1110 0001 -> 0x40 0xE1

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 30 31 32 33 34 35 36 37 38 39 3A 30 31 32 33 34 35 36 37 38 39 3A 30 31 32 33 34 35 36 37 38 39           ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
• DATA1: For LimitedUse Test: disable read/write;
  • WriteConfig: 0b1000: Disable encrypted write; Disable DeriveKey;
  • WriteKey   : 0x00  : Write encryption key - probably does not care;
  • IsSecret   : 1     : Enforce encryption;
  • EncryptRead: 0     : Disable encrypted read;
  • SingleUse  : 1     : Limit use according to UseFlag;
  • CheckOnly  : 0     : This Data Slot can be used for any command;
  • ReadKey    : 0x01  : Probably does not care - ReadPwd1;

  0b1000
  0b0000
  0b1
  0b0
  0b1
  0b0
  0b0001 -> 0b1000 0000 1010 0001 -> 0x80 0xA1

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 40 41 42 43 44 45 46 47 48 49 4A 40 41 42 43 44 45 46 47 48 49 4A 40 41 42 43 44 45 46 47 48 49           ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
• PASSWORD1: authentication key: encrypted read/write, derivable from WritePwd1;
  • WriteConfig: 0b0111: Disable authorizing MAC; Enable encrypted write; Enable DeriveKey from Parent Key;
  • WriteKey   : 0x05  : Write encryption key or Parent Key;
  • IsSecret   : 1     : Enforce encryption;
  • EncryptRead: 1     : Enable encrypted read;
  • SingleUse  : 0     : No limit use with CheckMAC;
  • CheckOnly  : 0     : Enable use for any command (imperative for DeriveKey and CheckMAC);
  • ReadKey    : 0x01  : Read encryption key - ReadPwd1;

0b0111
0b0101
0b1
0b1
0b0
0b0 
0b0001 -> 0b0111 0101 1100 0001 -> 0x75 0xC1
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 50 51 52 53 54 55 56 57 58 59 5A 50 51 52 53 54 55 56 57 58 59 5A 50 51 52 53 54 55 56 57 58 59           ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
• SECRET1: encrypted write, derivable from itself;
  • WriteConfig: 0b0110: Disable authorizing MAC; Enable encrypted write; Enable DeriveKey from itself;
  • WriteKey   : 0x00  : Write encryption key or Parent Key - WritePwd1;
  • IsSecret   : 1     : Enforce encryption;
  • EncryptRead: 0     : Disable read;
  • SingleUse  : 1     : set UseFlag to zero so any command but CheckMAC is blocked;
  • CheckOnly  : 0     : Enable use for any command (imperative for DeriveKey and CheckMAC);
  • ReadKey    : 0x00  : Must be zero (enable CheckMAC copy function);

0b0110
0b0000
0b1
0b0
0b1
0b0
0b0000 ->  0b0110 0000 1010 0000 -> 0x60, 0xA0

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 60 61 62 63 64 65 66 67 68 69 6A 60 61 62 63 64 65 66 67 68 69 6A 60 61 62 63 64 65 66 67 68 69           ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
• PASSWORD2: encrypted read/write, disable DeriveKey;
  • WriteConfig: 0b0100: Disable authorizing MAC; Enable encrypted write; Disable DeriveKey;
  • WriteKey   : 0x07  : Write encryption key;
  • IsSecret   : 1     : Enforce encryption;
  • EncryptRead: 1     : Enable encrypted read;
  • SingleUse  : 0     : No limit use with CheckMAC;
  • CheckOnly  : 1     : Enable use only for CheckMAC and GenDig+CheckMAC commands;
  • ReadKey    : 0x01  : Read encryption key - ReadPwd1;

0b0100
0b0111
0b1 
0b1 
0b0 
0b1 
0b0001 -> 0b0100 0111 1101 0001 -> 0x47 0xD1

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 70 71 72 73 74 75 76 77 78 79 7A 70 71 72 73 74 75 76 77 78 79 7A 70 71 72 73 74 75 76 77 78 79           ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
• SECRET2: encrypted write, disable DeriveKey;
  • WriteConfig: 0b0100: Disable authorizing MAC; Enable encrypted write; Disable DeriveKey;
  • WriteKey   : 0x00  : Write encryption key - WritePwd1;
  • IsSecret   : 1     : Enforce encryption;
  • EncryptRead: 0     : Disable read;
  • SingleUse  : 1     : set UseFlag to zero so any command but CheckMAC is blocked;
  • CheckOnly  : 1     : Enable use for any command (imperative for DeriveKey and CheckMAC);
  • ReadKey    : 0x00  : Must be zero (enable CheckMAC copy function);

0b0100
0b0000
0b1 
0b0 
0b1 
0b1 
0b0000 -> 0b0100 0000 1011 0000 -> 0x40, 0xB0



┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 80 81 82 83 84 85 86 87 88 89 8A 80 81 82 83 84 85 86 87 88 89 8A 80 81 82 83 84 85 86 87 88 89           ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
• ReadPwd2: encrypted read/write, not derivable, check only = 0;
  • WriteConfig: 0b0100: Disable authorizing MAC; Enable encrypted write; Disable DeriveKey;
  • WriteKey   : 0x09  : Write encryption key;
  • IsSecret   : 1     : Enforce encryption;
  • EncryptRead: 1     : Enable encrypted read;
  • SingleUse  : 0     : No use limit;
  • CheckOnly  : 0     : Enable use for any command;
  • ReadKey    : 0x0E  : Read encryption key - MASTERKEY;

0b0100
0b1001
0b1100 
0b1110 -> 0b0100 1001 1100 1110 ->  0x49,  0xCE

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 90 91 92 93 94 95 96 97 98 99 9A 90 91 92 93 94 95 96 97 98 99 9A 90 91 92 93 94 95 96 97 98 99           ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
• WritePwd2: encrypted read/write, not derivable;
  • WriteConfig: 0b0100: Disable authorizing MAC; Enable encrypted write; Disable DeriveKey;
  • WriteKey   : 0x09  : Write encryption key;
  • IsSecret   : 1     : Enforce encryption;
  • EncryptRead: 1     : Enable encrypted read;
  • SingleUse  : 0     : No use limit;
  • CheckOnly  : 0     : Enable use for any command;
  • ReadKey    : 0x0E  : Read encryption key - MASTERKEY;

0b0100
0b1001
0b1100
0b1110 -> 0b0100 1001 1100 1110 ->  0x49,  0xCE

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA A0 A1 A2 A3 A4 A5 A6 A7 A8 A9           ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
• DATA[2]: encrypted read/writable, unlimited use;
  • WriteConfig: 0b0100: Disable authorizing MAC; Enable encrypted write; Disable DeriveKey;
  • WriteKey   : 0x09  : Write encryption key WritePwd2;
  • IsSecret   : 1     : Enforce encryption;
  • EncryptRead: 1     : Enable encrypted read;
  • SingleUse  : 0     : No limit use
  • CheckOnly  : 0     : Enable use for any command;
  • ReadKey    : 0x08  : Read encryption key ReadPwd2;

0b0100
0b1001
0b1100
0b1000 -> 0b0100 1001 1100 1000 -> 0x49, 0xC8

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA B0 B1 B2 B3 B4 B5 B6 B7 B8 B9           ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
• DATA[3]: not readable, not writable;
  • WriteConfig: 0b1000: Disable write; Disable DeriveKey;
  • WriteKey   : 0x09  : Write encryption key WritePwd2 - probably does not care;
  • IsSecret   : 1     : Enforce encryption;
  • EncryptRead: 0     : Disable read;
  • SingleUse  : 0     : No use limit;
  • CheckOnly  : 0     : Enable use for any command;
  • ReadKey    : 0x08  : Read encryption key ReadPwd2 - probably does not care;

0b1000
0b1001
0b1000
0b1000 -> 0b1000 1001 1000 1000 -> 0x89, 0x88

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA  C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA C0 C1 C2 C3 C4 C5 C6 C7 C8 C9          ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
• PASSWORD[3]: encrypted read/write, unlimited use;
  • WriteConfig: 0b0100: Disable authorizing MAC; Enable encrypted write; Disable DeriveKey;
  • WriteKey   : 0x0D  : Write encryption - Parent key that will be copied into TempKey;
  • IsSecret   : 1     : Enforce encryption;
  • EncryptRead: 1     : Read encryption key ReadPwd2;
  • SingleUse  : 0     : No use limit -  this Data Slot does not have an associated UseFlag;
  • CheckOnly  : 1     : Enable use only for CheckMAC and GenDig+CheckMAC commands;
  • ReadKey    : 0x08  : Read encryption key ReadPwd2;

0b0100
0b1101
0b1101
0b1000 -> 0b0100 1101 1101 1000 -> 0x4D, 0xD8

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA  D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA D0 D1 D2 D3 D4 D5 D6 D7 D8 D9          ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
• SECRET[3]: encrypted read, disable write;
  • WriteConfig: 0b0100: Disable authorizing MAC; Enable encrypted write; Disable DeriveKey;
  • WriteKey   : 0x09  : Write encryption key WritePwd2;
  • IsSecret   : 1     : Enforce encryption;
  • EncryptRead: 0     : Disable read;
  • SingleUse  : 0     : No use limit -  this Data Slot does not have an associated UseFlag;
  • CheckOnly  : 1     : Enable use only for CheckMAC and GenDig+CheckMAC commands;
  • ReadKey    : 0x00  : Must be zero (enable CheckMAC copy function);

0b0100
0b1001
0b1001
0b0000 -> 0b0100 1001 1001 0000 -> 0x49, 0x90

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA  E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA E0 E1 E2 E3 E4 E5 E6 E7 E8 E9          ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
• MASTERKEY: plain read and write;
  • WriteConfig: 0b0000: Plain write; Disable DeriveKey;
  • WriteKey   : 0x0E  : Write encryption key;
  • IsSecret   : 0     : No encryption;
  • EncryptRead: 0     : Plain read;
  • SingleUse  : 0     : No limit use
  • CheckOnly  : 0     : Enable use for any command;
  • ReadKey    : 0x0E  : Read encryption key;

0b0000
0b1110
0b0000
0b1110 -> 0b0000 1110 0000 1110 -> 0x0E, 0x0E

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA  F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA F0 F1 F2 F3 F4 F5 F6 F7 F8 F9          ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
• DATA[4]:  disable read, encrypted write;
  • WriteConfig: 0b0100: Disable authorizing MAC; Enable encrypted write; Disable DeriveKey;
  • WriteKey   : 0x09  : Write encryption key WritePwd2;
  • IsSecret   : 1     : Enforce encryption;
  • EncryptRead: 0     : Disable read;
  • SingleUse  : 0     : No limit use
  • CheckOnly  : 0     : Enable use for any command;
  • ReadKey    : 0x08  : Read encryption key ReadPwd2 - probably does not care;

• Slot P (0x08) is the PASSWORD, and should be stored in an even numbered Data Slot;

0b0100
0b1001
0b1000
0b1000 -> 0b0100 1001 1000 1000 -> 0x49, 0x88

┏━━━━━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ SlotConfig    ┃ VALUE     ┃ DESCRIPTION                                                                   ┃
┣━━━━━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ WriteConfig   ┃ 0b0100    ┃ Enable encrypted write; Disable DeriveKey;                                    │
┣━━━━━━━━━━━━━━━╋━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ WriteKey      ┃ 0x03      ┃ Points to the key that can be used to write a recovery value into Slot P;     │
┣━━━━━━━━━━━━━━━╋━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ IsSecret      ┃ 1         ┃ Disable read;                                                                 │
┣━━━━━━━━━━━━━━━╋━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ EncryptRead   ┃ 0         ┃ Disable read - the host should know its value;                                │
┣━━━━━━━━━━━━━━━╋━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ SingleUse     ┃ 0         ┃ Unlimited use with CheckMAC;                                                  │
┣━━━━━━━━━━━━━━━╋━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ CheckOnly     ┃ 1         ┃ This Data Slot can only be used for CheckMAC and GenDig+CheckMAC commands;    │
┃               ┃           ┃ Prevents exahustive password attack on a stolen drive;                        │
┣━━━━━━━━━━━━━━━╋━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ ReadKey       ┃ 0x02      ┃ Do not matter as read is disabled;                                            │
┗━━━━━━━━━━━━━━━┻━━━━━━━━━━━┹───────────────────────────────────────────────────────────────────────────────┘

• Slot S is the "secret", andh should be stored in the immediate next Data Slot from Slot P (Slot P + 1);

┏━━━━━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ SlotConfig    ┃ VALUE     ┃ DESCRIPTION                                                                   ┃
┣━━━━━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
┃ WriteConfig   ┃ 0b1000    ┃ Disable write; Disable DeriveKey;                                             │
┣━━━━━━━━━━━━━━━╋━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ WriteKey      ┃ 0x0A      ┃ Disable write;                                                                │
┣━━━━━━━━━━━━━━━╋━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ IsSecret      ┃ 1         ┃ Disable read;                                                                 │
┣━━━━━━━━━━━━━━━╋━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ EncryptRead   ┃ 0         ┃ Disable read;                                                                 │
┣━━━━━━━━━━━━━━━╋━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ SingleUse     ┃ 1         ┃ Set UseFlag to zero. This key can not be used with any command other than     │
┃               ┃           ┃ CheckMAC copy operation;                                                      │
┣━━━━━━━━━━━━━━━╋━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ CheckOnly     ┃ 1         ┃ This Data Slot can only be used for CheckMAC and GenDig+CheckMAC commands;    │
┃               ┃           ┃ Prevents exahustive password attack on a stolen drive;                        │
┣━━━━━━━━━━━━━━━╋━━━━━━━━━━━╉───────────────────────────────────────────────────────────────────────────────┤
┃ ReadKey       ┃ 0x00      ┃ Must be zero in order to enable special mode;                                 │
┗━━━━━━━━━━━━━━━┻━━━━━━━━━━━┹───────────────────────────────────────────────────────────────────────────────┘


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ USAGE EXAMPLE                                                                                             ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ AN8849 COMMAND SEQUENCES - SECTION 7.1 PASSWORD MAP                                                       ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

• Run Nonce command with as internally generated random number;
• Run CheckMAC command;
  • The secret will be copied into the TempKey;
• Run MAC command;
  • The return from MAC (a 32-bytes digest), is returned to the host to be used as encryption/decryption key;

→ Duvida:
  1) O comando encrypted read funciona se o bit respectivo CheckOnly estiver setado?
  2) De acordo com o AN 8752 (seção 3.4) O fluxo recomendado é:
    2.1) Nonce + GenDig(optional);
    2.2) Externamente, os seguintes processos devem ser realizados:
      2.2.1) A TempKey pode ser calculada externamente;
      2.2.2) Uma PASSWORD externa deve ser inserida, por exemplo, por um usuário;
        2.2.2.1) A PASSWORD deve coincidir com o conteúdo de Slot<ID>;
      2.2.3) A partir de uma PASSWORD + TempKey é gerada um digest (ClientResp);
    2.3) CheckMAC irá rodar o MAC(key<SlotID> + TempKey) e comparar o resultado com o ClientResp;
      2.3.1) Se os resultados coincidirem, o SECRET que está em key<SlotID + 1> será carregado na TempKey;
      2.3.2) O fato de o byte MODE compor a SHA-256 com MODE[2] forçando que a TempKey seja aleatória,
             garante uma proteção contra replay attacks (não se pode forçar um valor de INPUT na TempKey -
             a TempKey PRECISA ser RANDOM!);
      2.3.3) O datasheet não descreve que o comando CheckMAC altera as flags de TempKey;
    2.2) O resultado da digest de MAC(TempKey + Challenge) (lembre que a TempKey contém o valor do SECRET
         em key<SlotID + 1>, e o Challenge é uma entrada do tipo blob binário de 32 bytes) é a senha para
         encriptar/decriptar arquivos;
    O digest gerado no passo 2.2 não é SEMPRE O MESMO e APARECERÁ NO BARRAMENTO? Um atacante que está
    fisicamente monitorando as trilhas SDA e SCL do dispositivo não pode acabar lendo a saída do passo 2.2?
    Não seria possível, em vez de executar o passo 2.2, fazer uma Encrypted Read da key<SlotID>? Eu entendo
    que a leitura irá retornar sempre o mesmo valor key<SlotID> XOR key<SlotID + 1>, da mesma forma que o
    passo 2.2 retorna sempre o mesmo valor, mas é o resultado do XOR de dois números aleatórios (que pode ser
    qualquer número).
    Nesse cenário, SlotID deve estar com IsSecret = 1 e EncryptRead = 1, e GenDig deve ser executado a partir
    de SlotID como parâmetro de entrada;


    O documento AN 8849 Command Sequences, na seção 7.1 Password Map, especifica que os Data Slots que
    guarda as informações de PASSWORD e SECRET deve ter o bit CheckOnly setado em '1', pare prevenir contra
    "exaustive password attacks". É possível rodar o comando Encrypted Read se o Slot respectivo estiver
    configurado como CheckOnly?


Question regarding CryptoAuthenticator ATSHA204A.

In AN 8752 Using the ATSHA204A for Secure Password Operations section 3.4, it is given an example of procedure to retrieve a SECRET from one of the Data Slots in ATSHA204A:

1) run Nonce command using the internal random number generator;
2) run the CheckMAC command using key<SlotID> and the TempKey generated in step 1. If the command is successful, the contents of SlotID+1 will be loaded into the TempKey;
3) run the Mac command using TempKey and a 32-byte ClientChal (a binary blob inserted by the host). This will return a SHA-256 digest that could be used as an encryption key;

Question 1) Someone physically monitoring the I2C interface lines between a microcontroller and ATSHA204A wouldn't be able to spy the key generated in step 3?

Question 2) Can I use an encrypted read command (instead of the Mac command in step 3) to read the contents of key<SlotID> XORed with TempKey (that would hold key<SlotID + 1>)? Wouldn't it be a safer option?

Question 3) If question 2 is possible, can SlotID be configured as CheckOnly set to '1'? Would the encrypt read command still be possible in a Data Slot configured with CheckOnly set to '1'?

Best regards,
Mauricio Yui




┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ BLOCK CONFIG ZONE                                                                                          ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

0x07
0x?? SIZE
0x17 Opcode do comando Lock
0x00 Especifica que se quer travar a zona de configuração
0x???? CRC de todos os 88 bytes da zona de configuração
0x???? CRC do pacote da mensagem


{0x07, 0x07, 0x17, 0x00, 0xZZ, 0xYY, 0x2e, 0x0d };

0xZZ: LSB do CRC-16 dos 88 bytes da zona de configuração
0xYY: MSB do CRC-16 dos 88 bytes da zona de configuração 


read_config1[0] -> errado deveria ser A0