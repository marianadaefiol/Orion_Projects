#include <iostream>
#include <chrono>
#include <ctime>
#include <cstring>

#include "sha256.h"

/*
https://github.com/MicrochipTech/cryptoauth-openssl-engine/tree/master/cryptoauthlib
*/

int main(int argc, char ** argv) {

  // // UG 052015 - NONCE VALIDATED!
  // uint8_t randOut[] = {
  //   0x1f, 0x1a, 0x57, 0x5b, 0xa6, 0x92, 0xf4, 0x62,
  //   0x73, 0x0a, 0x54, 0x9a, 0x6f, 0xdd, 0x0e, 0x81,
  //   0x4b, 0x63, 0xf3, 0x67, 0x4c, 0x1b, 0xcf, 0xd0,
  //   0x72, 0xee, 0xfe, 0x94, 0x63, 0xfd, 0x95, 0x7b,
  // };

  // // UG 052015 - NONCE VALIDATED!
  // uint8_t numInt[] = {
  //   0x54, 0x79, 0x70, 0x65, 0x20, 0x43, 0x68, 0x61,
  //   0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x20, 0x48,
  //   0x65, 0x72, 0x65, 0x00,
  // };

  // DOC 8738 - NONCE VALIDATED!
  uint8_t randOut[] = {
    0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00,
    0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00,
    0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00,
    0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00,
  };

  // DOC 8738 - NONCE VALIDATED!
  uint8_t numInt[] = {	
  	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09
  };

  uint8_t nonce[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // RandOut
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // NumIn
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x16, 0x00, 0x00
  };

  uint8_t slot0[] = {
    0x00, 0x00, 0xA1, 0xAC, 0x57, 0xFF, 0x40, 0x4E,
    0x45, 0xD4, 0x04, 0x01, 0xBD, 0x0E, 0xD3, 0xC6,
    0x73, 0xD3, 0xB7, 0xB8, 0x2D, 0x85, 0xD9, 0xF3,
    0x13, 0xB5, 0x5E, 0xDA, 0x3D, 0x94, 0x00, 0x00,
  };

  // DOC 8738 - MAC VALIDATED!
  uint8_t mac[] = {
 	// slot 0 - Default factory valueMAC DIGEST: 
	
 	// TempKey
0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4,
0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x08, 0x00, 0x0f, 
	0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x23, 0x00, 0x00
/*    0x08, 0x01, 0x08, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00,
    0xee, 0x00, 0x00, 0x00, 0x00, 0x01, 0x23,
    0x00, 0x00,
  */
  };



  printf("NONCE COMMAND: \n");
  for(int idx = 0; idx < 32; ++idx)
    nonce[0 + idx] = randOut[idx];

  for(int idx = 0; idx < 20; ++idx)
    nonce[idx + 32] = numInt[idx];

  // for(int idx = 0; idx < sizeof(nonce); ++idx)
  // {
  //   printf("%02X ", nonce[idx]);
  //   if(((idx + 1) % 8) == 0)
  //     printf("\n");
  // }
  // printf("\n");

  uint8_t digestNonce[32];
  memset(digestNonce, 0x00, sizeof(digestNonce));

  atcac_sw_sha2_256(nonce, sizeof(nonce), digestNonce);

  printf("NONCE DIGEST: \n");
  for(int idx = 0; idx < sizeof(digestNonce); ++idx)
    printf("%02X ", digestNonce[idx]);
  printf("\n");

  uint8_t digestMac[32];
  memset(digestMac, 0x00, sizeof(digestMac));

  atcac_sw_sha2_256(mac, sizeof(mac), digestMac);

  printf("MAC DIGEST: \n");
  for(int idx = 0; idx < sizeof(digestMac); ++idx)
    printf("%02X ", digestMac[idx]);
  printf("\n");

  return EXIT_SUCCESS;
}
