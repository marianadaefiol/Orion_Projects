#include <iostream>
#include <chrono>
#include <ctime>
#include "sha256.h"

/*
https://github.com/System-Glitch/SHA256

$ ./SHA256 "string" "string2"
473287f8298dba7163a897908958f7c0eae733e25d2e027992ea2edc9bed2fa8
b993212a26658c9077096b804cdfb92ad21cf1e199e272c44eb028e45d07b6e0
*/

uint8_t randOut[] = {
  0x3c, 0xcf, 0x7a, 0x6d, 0xc3, 0x48, 0x56, 0xc4,
  0xed, 0x5f, 0xe0, 0x96, 0x97, 0xae, 0xbd, 0xdc,
  0x11, 0x11, 0xfa, 0x2f, 0x1c, 0x48, 0x6a, 0xd4,
  0x83, 0xeb, 0x52, 0x8c, 0xfb, 0xe2, 0xe7, 0x9f,
};

uint8_t numIn[] = {
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
  0x00, 0x01
};

uint8_t nonce[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // RandOut
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // NumIn
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x16, 0x00, 0x00,
  // 0x80,                                           // 56 PAD
  // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xB8  // LENGTH
};

// uint8_t slot8[] = {
//   0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
//   0x88, 0x89, 0x8A, 0x80, 0x81, 0x82, 0x83, 0x84,
//   0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x80, 0x81,
//   0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
// };

uint8_t slot8[] = {
  0x88, 0x88, 0xC6, 0x2A, 0xFE, 0x1F, 0x82, 0xD4,
  0xE0, 0x85, 0x85, 0x34, 0x4D, 0x77, 0xB8, 0x9D,
  0xEC, 0x36, 0xF2, 0x06, 0x27, 0xE4, 0xF0, 0xCF,
  0x03, 0x0E, 0x27, 0xB8, 0xEE, 0xE3, 0x88, 0x88,
};

uint8_t slot9[] = {
  0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
  0x98, 0x99, 0x9A, 0x90, 0x91, 0x92, 0x93, 0x94,
  0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x90, 0x91,
  0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,
};


uint8_t slotE[] = {
  0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
  0xE8, 0xE9, 0xEA, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4,
  0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xE0, 0xE1,
  0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9,
};

uint8_t gendig[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Slot
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  0x15, 0x02, 0x0E, 0x00, 0xEE, 0x01, 0x23, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // TempKey
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  // 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 104 PAD
  // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, // 128 LENGTH
};

int main(int argc, char ** argv) {
    printf("NONCE:\n");
    for(int idx = 0; idx < 32; ++idx)
      nonce[0 + idx] = randOut[idx];

    for(int idx = 0; idx < 20; ++idx)
      nonce[idx + 32] = numIn[idx];

    for(int idx = 0; idx < sizeof(nonce); ++idx)
    {
      printf("%02X ", nonce[idx]);
      if(((idx + 1) % 8) == 0)
        printf("\n");
    }
    printf("\n");

    SHA256 nonceSHA256;
    nonceSHA256.update(nonce, sizeof(nonce));
    uint8_t * nonceDigest = nonceSHA256.digest();
    std::cout << "NONCE DIGEST:" << std::endl;
    std::cout << SHA256::toString(nonceDigest) << std::endl;

    // ------------------------------------------------------------------------

    printf("\nGENDIG:\n");

    SHA256 gendigSHA256;

    // Inserir Slot 8 na hash do GenDig
    for(int idx = 0; idx < 32; ++idx)
      gendig[idx] = slotE[idx];

    // Inserir TempKey na hash do GenDig
    for(int idx = 0; idx < 32; ++idx)
      gendig[64 + idx] = nonceDigest[idx];

    for(int idx = 0; idx < sizeof(gendig); ++idx)
    {
      printf("%02X ", gendig[idx]);
      if(((idx + 1) % 8) == 0)
        printf("\n");
    }
    printf("\n");

    gendigSHA256.update(gendig, sizeof(gendig));
    uint8_t * gendigDigest = gendigSHA256.digest();
    std::cout << "GENDIG DIGEST:" << std::endl;
    std::cout << SHA256::toString(gendigDigest) << std::endl;



    printf("\nREAD SLOT 0x09:\n");
    for(int idx = 0; idx < sizeof(slot9); ++idx)
      printf("%02X ", gendigDigest[idx] ^ slot9[idx]);
    printf("\n");

    delete[] nonceDigest;
    delete[] gendigDigest;

    return EXIT_SUCCESS;
}
